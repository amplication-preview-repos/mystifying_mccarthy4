/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Data as PrismaData,
  Record as PrismaRecord,
} from "@prisma/client";

export class DataServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DataCountArgs, "select">): Promise<number> {
    return this.prisma.data.count(args);
  }

  async dataItems<T extends Prisma.DataFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataFindManyArgs>
  ): Promise<PrismaData[]> {
    return this.prisma.data.findMany<Prisma.DataFindManyArgs>(args);
  }
  async data<T extends Prisma.DataFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataFindUniqueArgs>
  ): Promise<PrismaData | null> {
    return this.prisma.data.findUnique(args);
  }
  async createData<T extends Prisma.DataCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataCreateArgs>
  ): Promise<PrismaData> {
    return this.prisma.data.create<T>(args);
  }
  async updateData<T extends Prisma.DataUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataUpdateArgs>
  ): Promise<PrismaData> {
    return this.prisma.data.update<T>(args);
  }
  async deleteData<T extends Prisma.DataDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DataDeleteArgs>
  ): Promise<PrismaData> {
    return this.prisma.data.delete(args);
  }

  async findRecords(
    parentId: string,
    args: Prisma.RecordFindManyArgs
  ): Promise<PrismaRecord[]> {
    return this.prisma.data
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .records(args);
  }
}
