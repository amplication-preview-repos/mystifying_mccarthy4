/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  VehicleSecret as PrismaVehicleSecret,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class VehicleSecretServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VehicleSecretCountArgs, "select">
  ): Promise<number> {
    return this.prisma.vehicleSecret.count(args);
  }

  async vehicleSecrets<T extends Prisma.VehicleSecretFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VehicleSecretFindManyArgs>
  ): Promise<PrismaVehicleSecret[]> {
    return this.prisma.vehicleSecret.findMany<Prisma.VehicleSecretFindManyArgs>(
      args
    );
  }
  async vehicleSecret<T extends Prisma.VehicleSecretFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VehicleSecretFindUniqueArgs>
  ): Promise<PrismaVehicleSecret | null> {
    return this.prisma.vehicleSecret.findUnique(args);
  }
  async createVehicleSecret<T extends Prisma.VehicleSecretCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VehicleSecretCreateArgs>
  ): Promise<PrismaVehicleSecret> {
    return this.prisma.vehicleSecret.create<T>(args);
  }
  async updateVehicleSecret<T extends Prisma.VehicleSecretUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VehicleSecretUpdateArgs>
  ): Promise<PrismaVehicleSecret> {
    return this.prisma.vehicleSecret.update<T>(args);
  }
  async deleteVehicleSecret<T extends Prisma.VehicleSecretDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VehicleSecretDeleteArgs>
  ): Promise<PrismaVehicleSecret> {
    return this.prisma.vehicleSecret.delete(args);
  }

  async getVehicle(parentId: string): Promise<PrismaVehicle | null> {
    return this.prisma.vehicleSecret
      .findUnique({
        where: { id: parentId },
      })
      .vehicle();
  }
}
