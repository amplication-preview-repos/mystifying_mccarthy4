/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { VehicleSecret } from "./VehicleSecret";
import { VehicleSecretCountArgs } from "./VehicleSecretCountArgs";
import { VehicleSecretFindManyArgs } from "./VehicleSecretFindManyArgs";
import { VehicleSecretFindUniqueArgs } from "./VehicleSecretFindUniqueArgs";
import { CreateVehicleSecretArgs } from "./CreateVehicleSecretArgs";
import { UpdateVehicleSecretArgs } from "./UpdateVehicleSecretArgs";
import { DeleteVehicleSecretArgs } from "./DeleteVehicleSecretArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { VehicleSecretService } from "../vehicleSecret.service";
@graphql.Resolver(() => VehicleSecret)
export class VehicleSecretResolverBase {
  constructor(protected readonly service: VehicleSecretService) {}

  async _vehicleSecretsMeta(
    @graphql.Args() args: VehicleSecretCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [VehicleSecret])
  async vehicleSecrets(
    @graphql.Args() args: VehicleSecretFindManyArgs
  ): Promise<VehicleSecret[]> {
    return this.service.vehicleSecrets(args);
  }

  @graphql.Query(() => VehicleSecret, { nullable: true })
  async vehicleSecret(
    @graphql.Args() args: VehicleSecretFindUniqueArgs
  ): Promise<VehicleSecret | null> {
    const result = await this.service.vehicleSecret(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => VehicleSecret)
  async createVehicleSecret(
    @graphql.Args() args: CreateVehicleSecretArgs
  ): Promise<VehicleSecret> {
    return await this.service.createVehicleSecret({
      ...args,
      data: {
        ...args.data,

        vehicle: args.data.vehicle
          ? {
              connect: args.data.vehicle,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => VehicleSecret)
  async updateVehicleSecret(
    @graphql.Args() args: UpdateVehicleSecretArgs
  ): Promise<VehicleSecret | null> {
    try {
      return await this.service.updateVehicleSecret({
        ...args,
        data: {
          ...args.data,

          vehicle: args.data.vehicle
            ? {
                connect: args.data.vehicle,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => VehicleSecret)
  async deleteVehicleSecret(
    @graphql.Args() args: DeleteVehicleSecretArgs
  ): Promise<VehicleSecret | null> {
    try {
      return await this.service.deleteVehicleSecret(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Vehicle, {
    nullable: true,
    name: "vehicle",
  })
  async getVehicle(
    @graphql.Parent() parent: VehicleSecret
  ): Promise<Vehicle | null> {
    const result = await this.service.getVehicle(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
