/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { VehicleSecretService } from "../vehicleSecret.service";
import { VehicleSecretCreateInput } from "./VehicleSecretCreateInput";
import { VehicleSecret } from "./VehicleSecret";
import { VehicleSecretFindManyArgs } from "./VehicleSecretFindManyArgs";
import { VehicleSecretWhereUniqueInput } from "./VehicleSecretWhereUniqueInput";
import { VehicleSecretUpdateInput } from "./VehicleSecretUpdateInput";

export class VehicleSecretControllerBase {
  constructor(protected readonly service: VehicleSecretService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: VehicleSecret })
  async createVehicleSecret(
    @common.Body() data: VehicleSecretCreateInput
  ): Promise<VehicleSecret> {
    return await this.service.createVehicleSecret({
      data: {
        ...data,

        vehicle: data.vehicle
          ? {
              connect: data.vehicle,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [VehicleSecret] })
  @ApiNestedQuery(VehicleSecretFindManyArgs)
  async vehicleSecrets(
    @common.Req() request: Request
  ): Promise<VehicleSecret[]> {
    const args = plainToClass(VehicleSecretFindManyArgs, request.query);
    return this.service.vehicleSecrets({
      ...args,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: VehicleSecret })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async vehicleSecret(
    @common.Param() params: VehicleSecretWhereUniqueInput
  ): Promise<VehicleSecret | null> {
    const result = await this.service.vehicleSecret({
      where: params,
      select: {
        createdAt: true,
        id: true,
        key: true,
        updatedAt: true,

        vehicle: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: VehicleSecret })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateVehicleSecret(
    @common.Param() params: VehicleSecretWhereUniqueInput,
    @common.Body() data: VehicleSecretUpdateInput
  ): Promise<VehicleSecret | null> {
    try {
      return await this.service.updateVehicleSecret({
        where: params,
        data: {
          ...data,

          vehicle: data.vehicle
            ? {
                connect: data.vehicle,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: VehicleSecret })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteVehicleSecret(
    @common.Param() params: VehicleSecretWhereUniqueInput
  ): Promise<VehicleSecret | null> {
    try {
      return await this.service.deleteVehicleSecret({
        where: params,
        select: {
          createdAt: true,
          id: true,
          key: true,
          updatedAt: true,

          vehicle: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
