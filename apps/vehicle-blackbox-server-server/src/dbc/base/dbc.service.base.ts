/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dbc as PrismaDbc,
  Vehicle as PrismaVehicle,
} from "@prisma/client";

export class DbcServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DbcCountArgs, "select">): Promise<number> {
    return this.prisma.dbc.count(args);
  }

  async dbcs<T extends Prisma.DbcFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbcFindManyArgs>
  ): Promise<PrismaDbc[]> {
    return this.prisma.dbc.findMany<Prisma.DbcFindManyArgs>(args);
  }
  async dbc<T extends Prisma.DbcFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbcFindUniqueArgs>
  ): Promise<PrismaDbc | null> {
    return this.prisma.dbc.findUnique(args);
  }
  async createDbc<T extends Prisma.DbcCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbcCreateArgs>
  ): Promise<PrismaDbc> {
    return this.prisma.dbc.create<T>(args);
  }
  async updateDbc<T extends Prisma.DbcUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbcUpdateArgs>
  ): Promise<PrismaDbc> {
    return this.prisma.dbc.update<T>(args);
  }
  async deleteDbc<T extends Prisma.DbcDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbcDeleteArgs>
  ): Promise<PrismaDbc> {
    return this.prisma.dbc.delete(args);
  }

  async findVehicles(
    parentId: string,
    args: Prisma.VehicleFindManyArgs
  ): Promise<PrismaVehicle[]> {
    return this.prisma.dbc
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .vehicles(args);
  }
}
