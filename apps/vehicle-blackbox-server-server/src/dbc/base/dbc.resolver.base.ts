/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dbc } from "./Dbc";
import { DbcCountArgs } from "./DbcCountArgs";
import { DbcFindManyArgs } from "./DbcFindManyArgs";
import { DbcFindUniqueArgs } from "./DbcFindUniqueArgs";
import { CreateDbcArgs } from "./CreateDbcArgs";
import { UpdateDbcArgs } from "./UpdateDbcArgs";
import { DeleteDbcArgs } from "./DeleteDbcArgs";
import { VehicleFindManyArgs } from "../../vehicle/base/VehicleFindManyArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { DbcService } from "../dbc.service";
@graphql.Resolver(() => Dbc)
export class DbcResolverBase {
  constructor(protected readonly service: DbcService) {}

  async _dbcsMeta(
    @graphql.Args() args: DbcCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dbc])
  async dbcs(@graphql.Args() args: DbcFindManyArgs): Promise<Dbc[]> {
    return this.service.dbcs(args);
  }

  @graphql.Query(() => Dbc, { nullable: true })
  async dbc(@graphql.Args() args: DbcFindUniqueArgs): Promise<Dbc | null> {
    const result = await this.service.dbc(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dbc)
  async createDbc(@graphql.Args() args: CreateDbcArgs): Promise<Dbc> {
    return await this.service.createDbc({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Dbc)
  async updateDbc(@graphql.Args() args: UpdateDbcArgs): Promise<Dbc | null> {
    try {
      return await this.service.updateDbc({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dbc)
  async deleteDbc(@graphql.Args() args: DeleteDbcArgs): Promise<Dbc | null> {
    try {
      return await this.service.deleteDbc(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Vehicle], { name: "vehicles" })
  async findVehicles(
    @graphql.Parent() parent: Dbc,
    @graphql.Args() args: VehicleFindManyArgs
  ): Promise<Vehicle[]> {
    const results = await this.service.findVehicles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
