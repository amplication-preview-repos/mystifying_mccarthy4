/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DbcService } from "../dbc.service";
import { DbcCreateInput } from "./DbcCreateInput";
import { Dbc } from "./Dbc";
import { DbcFindManyArgs } from "./DbcFindManyArgs";
import { DbcWhereUniqueInput } from "./DbcWhereUniqueInput";
import { DbcUpdateInput } from "./DbcUpdateInput";
import { VehicleFindManyArgs } from "../../vehicle/base/VehicleFindManyArgs";
import { Vehicle } from "../../vehicle/base/Vehicle";
import { VehicleWhereUniqueInput } from "../../vehicle/base/VehicleWhereUniqueInput";

export class DbcControllerBase {
  constructor(protected readonly service: DbcService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dbc })
  async createDbc(@common.Body() data: DbcCreateInput): Promise<Dbc> {
    return await this.service.createDbc({
      data: data,
      select: {
        bytes: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dbc] })
  @ApiNestedQuery(DbcFindManyArgs)
  async dbcs(@common.Req() request: Request): Promise<Dbc[]> {
    const args = plainToClass(DbcFindManyArgs, request.query);
    return this.service.dbcs({
      ...args,
      select: {
        bytes: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dbc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dbc(@common.Param() params: DbcWhereUniqueInput): Promise<Dbc | null> {
    const result = await this.service.dbc({
      where: params,
      select: {
        bytes: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
        version: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dbc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDbc(
    @common.Param() params: DbcWhereUniqueInput,
    @common.Body() data: DbcUpdateInput
  ): Promise<Dbc | null> {
    try {
      return await this.service.updateDbc({
        where: params,
        data: data,
        select: {
          bytes: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dbc })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDbc(
    @common.Param() params: DbcWhereUniqueInput
  ): Promise<Dbc | null> {
    try {
      return await this.service.deleteDbc({
        where: params,
        select: {
          bytes: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
          version: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/:id/vehicles")
  @ApiNestedQuery(VehicleFindManyArgs)
  async findVehicles(
    @common.Req() request: Request,
    @common.Param() params: DbcWhereUniqueInput
  ): Promise<Vehicle[]> {
    const query = plainToClass(VehicleFindManyArgs, request.query);
    const results = await this.service.findVehicles(params.id, {
      ...query,
      select: {
        color: true,
        createdAt: true,

        dbc: {
          select: {
            id: true,
          },
        },

        id: true,
        image: true,
        make: true,
        model: true,
        name: true,
        secrets: true,
        trim: true,
        typeField: true,
        updatedAt: true,
        vin: true,
        year: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vehicles")
  async connectVehicles(
    @common.Param() params: DbcWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicles: {
        connect: body,
      },
    };
    await this.service.updateDbc({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vehicles")
  async updateVehicles(
    @common.Param() params: DbcWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicles: {
        set: body,
      },
    };
    await this.service.updateDbc({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vehicles")
  async disconnectVehicles(
    @common.Param() params: DbcWhereUniqueInput,
    @common.Body() body: VehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vehicles: {
        disconnect: body,
      },
    };
    await this.service.updateDbc({
      where: params,
      data,
      select: { id: true },
    });
  }
}
